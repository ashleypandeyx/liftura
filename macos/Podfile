platform :osx, '10.15'  # Set the minimum macOS deployment target to 10.15

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'ephemeral', 'Flutter-Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure \"flutter pub get\" is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Flutter-Generated.xcconfig, then run \"flutter pub get\""
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_macos_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_macos_pods File.dirname(File.realpath(__FILE__))

  # Firebase dependencies
  pod 'Firebase/Core', '~> 10.18.0'
  pod 'Firebase/Auth', '~> 10.18.0'
  pod 'Firebase/Firestore', '~> 10.18.0'
  # Add any other Firebase SDKs you need, like Analytics, Storage, etc.

  target 'RunnerTests' do
    inherit! :search_paths
    # Pods for testing
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_macos_build_settings(target)
    
    # Workaround for potential issues with Xcode and Flutter
    target.build_configurations.each do |config|
      config.build_settings['EXCLUDED_ARCHS[sdk=macosx*]'] = 'arm64'
    end

    # Ensure no duplicate frameworks are linked
    frameworks_to_remove = ['FirebaseFirestoreInternal', 'absl', 'grpc', 'grpcpp', 'openssl_grpc']
    target.build_phases.each do |phase|
      if phase.respond_to?(:files)
        phase.files.each do |file|
          frameworks_to_remove.each do |framework|
            if file.display_name.include?(framework)
              phase.remove_build_file(file)
            end
          end
        end
      end
    end
  end
end
